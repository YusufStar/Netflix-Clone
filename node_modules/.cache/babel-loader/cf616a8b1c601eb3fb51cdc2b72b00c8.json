{"ast":null,"code":"/**\n * Fuse.js v6.4.1 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2020 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\nfunction isArray(value) {\n  return !Array.isArray ? getTag(value) === '[object Array]' : Array.isArray(value);\n} // Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\n\n\nconst INFINITY = 1 / 0;\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n} // Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\n\n\nfunction isBoolean(value) {\n  return value === true || value === false || isObjectLike(value) && getTag(value) == '[object Boolean]';\n}\n\nfunction isObject(value) {\n  return typeof value === 'object';\n} // Checks if `value` is object-like.\n\n\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null;\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null;\n}\n\nfunction isBlank(value) {\n  return !value.trim().length;\n} // Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\n\n\nfunction getTag(value) {\n  return value == null ? value === undefined ? '[object Undefined]' : '[object Null]' : Object.prototype.toString.call(value);\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = key => `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = max => `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = name => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = key => `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n    let totalWeight = 0;\n    keys.forEach(key => {\n      let obj = createKey(key);\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n\n      this._keyMap[obj.id] = obj;\n      totalWeight += obj.weight;\n    }); // Normalize weights so that their sum is equal to 1\n\n    this._keys.forEach(key => {\n      key.weight /= totalWeight;\n    });\n  }\n\n  get(keyId) {\n    return this._keyMap[keyId];\n  }\n\n  keys() {\n    return this._keys;\n  }\n\n  toJSON() {\n    return JSON.stringify(this._keys);\n  }\n\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'));\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name));\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return {\n    path,\n    id,\n    weight,\n    src\n  };\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.');\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key;\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return;\n      } // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n\n\n      if (index === path.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true; // Search each item in the array.\n\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  }; // Backwards compatibility (since path used to be a string)\n\n\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n  return arr ? list : list[0];\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) => a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1\n};\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\nvar Config = { ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\nconst SPACE = /[^ ]+/g; // Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\n\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens);\n      }\n\n      const n = parseFloat((1 / Math.sqrt(numTokens)).toFixed(mantissa));\n      cache.set(numTokens, n);\n      return n;\n    },\n\n    clear() {\n      cache.clear();\n    }\n\n  };\n}\n\nclass FuseIndex {\n  constructor({\n    getFn = Config.getFn\n  } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n    this.setIndexRecords();\n  }\n\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return;\n    }\n\n    this.isCreated = true; // List is Array<String>\n\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  } // Adds a doc to the end of the index\n\n\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  } // Removes the doc at the specified index of the index\n\n\n  removeAt(idx) {\n    this.records.splice(idx, 1); // Change ref index of every subsquent doc\n\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]];\n  }\n\n  size() {\n    return this.records.length;\n  }\n\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return;\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n    this.records.push(record);\n  }\n\n  _addObject(doc, docIndex) {\n    let record = {\n      i: docIndex,\n      $: {}\n    }; // Iterate over every key (i.e, path), and fetch the value at that key\n\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return;\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{\n          nestedArrIndex: -1,\n          value\n        }];\n\n        while (stack.length) {\n          const {\n            nestedArrIndex,\n            value\n          } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue;\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n        record.$[keyIndex] = subRecord;\n      }\n    });\n    this.records.push(record);\n  }\n\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    };\n  }\n\n}\n\nfunction createIndex(keys, docs, {\n  getFn = Config.getFn\n} = {}) {\n  const myIndex = new FuseIndex({\n    getFn\n  });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex;\n}\n\nfunction parseIndex(data, {\n  getFn = Config.getFn\n} = {}) {\n  const {\n    keys,\n    records\n  } = data;\n  const myIndex = new FuseIndex({\n    getFn\n  });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex;\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return;\n  }\n\n  matches.forEach(match => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return;\n    }\n\n    const {\n      indices,\n      value\n    } = match;\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction computeScore(pattern, {\n  errors = 0,\n  currentLocation = 0,\n  expectedLocation = 0,\n  distance = Config.distance,\n  ignoreLocation = Config.ignoreLocation\n} = {}) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy;\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy;\n  }\n\n  return accuracy + proximity / distance;\n}\n\nfunction convertMaskToIndices(matchmask = [], minMatchCharLength = Config.minMatchCharLength) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n\n      start = -1;\n    }\n  } // (i-1 - start) + 1 => i - start\n\n\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices;\n} // Machine word size\n\n\nconst MAX_BITS = 32;\n\nfunction search(text, pattern, patternAlphabet, {\n  location = Config.location,\n  distance = Config.distance,\n  threshold = Config.threshold,\n  findAllMatches = Config.findAllMatches,\n  minMatchCharLength = Config.minMatchCharLength,\n  includeMatches = Config.includeMatches,\n  ignoreLocation = Config.ignoreLocation\n} = {}) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));\n  }\n\n  const patternLen = pattern.length; // Set starting location at beginning text and initialize the alphabet.\n\n  const textLen = text.length; // Handle the case when location > text.length\n\n  const expectedLocation = Math.max(0, Math.min(location, textLen)); // Highest score beyond which we give up.\n\n  let currentThreshold = threshold; // Is there a nearby exact match? (speedup)\n\n  let bestLocation = expectedLocation; // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n\n  const computeMatches = minMatchCharLength > 1 || includeMatches; // A mask of the matches, used for building the indices\n\n  const matchMask = computeMatches ? Array(textLen) : [];\n  let index; // Get all exact matches, here for speed up\n\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  } // Reset the best location\n\n\n  bestLocation = -1;\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n  const mask = 1 << patternLen - 1;\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    } // Use the result from this iteration as the maximum for the next.\n\n\n    binMax = binMid;\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen; // Initialize the bit array\n\n    let bitArr = Array(finish + 2);\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      } // First pass: exact match\n\n\n      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch; // Subsequent passes: fuzzy match\n\n      if (i) {\n        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        }); // This match will almost certainly be better than any existing match.\n        // But check anyway.\n\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation; // Already passed `loc`, downhill from here on in.\n\n          if (bestLocation <= expectedLocation) {\n            break;\n          } // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n\n\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    } // No hope for a (better) match at greater error levels.\n\n\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break;\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result;\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | 1 << len - i - 1;\n  }\n\n  return mask;\n}\n\nclass BitapSearch {\n  constructor(pattern, {\n    location = Config.location,\n    threshold = Config.threshold,\n    distance = Config.distance,\n    includeMatches = Config.includeMatches,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    isCaseSensitive = Config.isCaseSensitive,\n    ignoreLocation = Config.ignoreLocation\n  } = {}) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return;\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const {\n      isCaseSensitive,\n      includeMatches\n    } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    } // Exact match\n\n\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result;\n    } // Otherwise, use Bitap algorithm\n\n\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n    this.chunks.forEach(({\n      pattern,\n      alphabet,\n      startIndex\n    }) => {\n      const {\n        isMatch,\n        score,\n        indices\n      } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result;\n  }\n\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex);\n  }\n\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex);\n  }\n\n  search()\n  /*text*/\n  {}\n\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null;\n} // Token: 'file\n\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'exact';\n  }\n\n  static get multiRegex() {\n    return /^=\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^=(.*)$/;\n  }\n\n  search(text) {\n    const isMatch = text === this.pattern;\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    };\n  }\n\n} // Token: !fire\n\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^!(.*)$/;\n  }\n\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n} // Token: ^file\n\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'prefix-exact';\n  }\n\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^\\^(.*)$/;\n  }\n\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    };\n  }\n\n} // Token: !^fire\n\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-prefix-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^!\\^(.*)$/;\n  }\n\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n} // Token: .file$\n\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'suffix-exact';\n  }\n\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/;\n  }\n\n  static get singleRegex() {\n    return /^(.*)\\$$/;\n  }\n\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    };\n  }\n\n} // Token: !.file$\n\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-suffix-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/;\n  }\n\n  static get singleRegex() {\n    return /^!(.*)\\$$/;\n  }\n\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(pattern, {\n    location = Config.location,\n    threshold = Config.threshold,\n    distance = Config.distance,\n    includeMatches = Config.includeMatches,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    isCaseSensitive = Config.isCaseSensitive\n  } = {}) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive\n    });\n  }\n\n  static get type() {\n    return 'fuzzy';\n  }\n\n  static get multiRegex() {\n    return /^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^(.*)$/;\n  }\n\n  search(text) {\n    return this._bitapSearch.searchIn(text);\n  }\n\n} // Token: 'file\n\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'include';\n  }\n\n  static get multiRegex() {\n    return /^'\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^'(.*)$/;\n  }\n\n  search(text) {\n    let location = 0;\n    let index;\n    const indices = [];\n    const patternLen = this.pattern.length; // Get all exact matches\n\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n    return {\n      isMatch,\n      score: isMatch ? 1 : 0,\n      indices\n    };\n  }\n\n} // ❗Order is important. DO NOT CHANGE.\n\n\nconst searchers = [ExactMatch, IncludeMatch, PrefixExactMatch, InversePrefixExactMatch, InverseSuffixExactMatch, SuffixExactMatch, InverseExactMatch, FuzzyMatch];\nconst searchersLen = searchers.length; // Regex to split by spaces, but keep anything in quotes together\n\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|'; // Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\n\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map(item => {\n    let query = item.trim().split(SPACE_RE).filter(item => item && !!item.trim());\n    let results = [];\n\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i]; // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n\n      let found = false;\n      let idx = -1;\n\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue;\n      } // 2. Handle single query matches (i.e, once that are *not* quoted)\n\n\n      idx = -1;\n\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n\n        if (token) {\n          results.push(new searcher(token, options));\n          break;\n        }\n      }\n    }\n\n    return results;\n  });\n} // These extended matchers can return an array of matches, as opposed\n// to a singl match\n\n\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\n\nclass ExtendedSearch {\n  constructor(pattern, {\n    isCaseSensitive = Config.isCaseSensitive,\n    includeMatches = Config.includeMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    findAllMatches = Config.findAllMatches,\n    location = Config.location,\n    threshold = Config.threshold,\n    distance = Config.distance\n  } = {}) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      location,\n      threshold,\n      distance\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch;\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      };\n    }\n\n    const {\n      includeMatches,\n      isCaseSensitive\n    } = this.options;\n    text = isCaseSensitive ? text : text.toLowerCase();\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0; // ORs\n\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i]; // Reset indices\n\n      allIndices.length = 0;\n      numMatches = 0; // ANDs\n\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const {\n          isMatch,\n          indices,\n          score\n        } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break;\n        }\n      } // OR condition, so if TRUE, return\n\n\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result;\n      }\n    } // Nothing was matched\n\n\n    return {\n      isMatch: false,\n      score: 1\n    };\n  }\n\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options);\n    }\n  }\n\n  return new BitapSearch(pattern, options);\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = query => !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = query => !!query[KeyType.PATH];\n\nconst isLeaf = query => !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = query => ({\n  [LogicalOperator.AND]: Object.keys(query).map(key => ({\n    [key]: query[key]\n  }))\n}); // When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\n\n\nfunction parse(query, options, {\n  auto = true\n} = {}) {\n  const next = query => {\n    let keys = Object.keys(query);\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query));\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj;\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n    keys.forEach(key => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach(item => {\n          node.children.push(next(item));\n        });\n      }\n    });\n    return node;\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query);\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config,\n      ...options\n    };\n\n    if (this.options.useExtendedSearch && !true) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE);\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE);\n    }\n\n    this._myIndex = index || createIndex(this.options.keys, this._docs, {\n      getFn: this.options.getFn\n    });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return;\n    }\n\n    this._docs.push(doc);\n\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = () =>\n  /* doc, idx */\n  false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        results.push(doc);\n      }\n    }\n\n    return results;\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex;\n  }\n\n  search(query, {\n    limit = -1\n  } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n    let results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);\n    computeScore$1(results, {\n      ignoreFieldNorm\n    });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    });\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const {\n      records\n    } = this._myIndex;\n    const results = []; // Iterate over every string in the index\n\n    records.forEach(({\n      v: text,\n      i: idx,\n      n: norm\n    }) => {\n      if (!isDefined(text)) {\n        return;\n      }\n\n      const {\n        isMatch,\n        score,\n        indices\n      } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{\n            score,\n            value: text,\n            norm,\n            indices\n          }]\n        });\n      }\n    });\n    return results;\n  }\n\n  _searchLogical(query) {\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const {\n          keyId,\n          searcher\n        } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [{\n            idx,\n            item,\n            matches\n          }];\n        }\n\n        return [];\n      }\n      /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n\n\n      switch (node.operator) {\n        case LogicalOperator.AND:\n          {\n            const res = [];\n\n            for (let i = 0, len = node.children.length; i < len; i += 1) {\n              const child = node.children[i];\n              const result = evaluate(child, item, idx);\n\n              if (result.length) {\n                res.push(...result);\n              } else {\n                return [];\n              }\n            }\n\n            return res;\n          }\n\n        case LogicalOperator.OR:\n          {\n            const res = [];\n\n            for (let i = 0, len = node.children.length; i < len; i += 1) {\n              const child = node.children[i];\n              const result = evaluate(child, item, idx);\n\n              if (result.length) {\n                res.push(...result);\n                break;\n              }\n            }\n\n            return res;\n          }\n      }\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n    records.forEach(({\n      $: item,\n      i: idx\n    }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = {\n              idx,\n              item,\n              matches: []\n            };\n            results.push(resultMap[idx]);\n          }\n\n          expResults.forEach(({\n            matches\n          }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n    return results;\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const {\n      keys,\n      records\n    } = this._myIndex;\n    const results = []; // List is Array<Object>\n\n    records.forEach(({\n      $: item,\n      i: idx\n    }) => {\n      if (!isDefined(item)) {\n        return;\n      }\n\n      let matches = []; // Iterate over every key (i.e, path), and fetch the value at that key\n\n      keys.forEach((key, keyIndex) => {\n        matches.push(...this._findMatches({\n          key,\n          value: item[keyIndex],\n          searcher\n        }));\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n    return results;\n  }\n\n  _findMatches({\n    key,\n    value,\n    searcher\n  }) {\n    if (!isDefined(value)) {\n      return [];\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({\n        v: text,\n        i: idx,\n        n: norm\n      }) => {\n        if (!isDefined(text)) {\n          return;\n        }\n\n        const {\n          isMatch,\n          score,\n          indices\n        } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const {\n        v: text,\n        n: norm\n      } = value;\n      const {\n        isMatch,\n        score,\n        indices\n      } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({\n          score,\n          key,\n          value: text,\n          norm,\n          indices\n        });\n      }\n    }\n\n    return matches;\n  }\n\n} // Practical scoring function\n\n\nfunction computeScore$1(results, {\n  ignoreFieldNorm = Config.ignoreFieldNorm\n}) {\n  results.forEach(result => {\n    let totalScore = 1;\n    result.matches.forEach(({\n      key,\n      norm,\n      score\n    }) => {\n      const weight = key ? key.weight : null;\n      totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * (ignoreFieldNorm ? 1 : norm));\n    });\n    result.score = totalScore;\n  });\n}\n\nfunction format(results, docs, {\n  includeMatches = Config.includeMatches,\n  includeScore = Config.includeScore\n} = {}) {\n  const transformers = [];\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n  return results.map(result => {\n    const {\n      idx\n    } = result;\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach(transformer => {\n        transformer(result, data);\n      });\n    }\n\n    return data;\n  });\n}\n\nFuse.version = '6.4.1';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n{\n  Fuse.parseQuery = parse;\n}\n{\n  register(ExtendedSearch);\n}\nexport default Fuse;","map":{"version":3,"sources":["C:/Users/Yusuf/Desktop/Clarusway/Github-Projects/netflix-clone-v2/node_modules/fuse.js/dist/fuse.esm.js"],"names":["isArray","value","Array","getTag","INFINITY","baseToString","result","toString","isString","isNumber","isBoolean","isObjectLike","isObject","isDefined","undefined","isBlank","trim","length","Object","prototype","call","EXTENDED_SEARCH_UNAVAILABLE","INCORRECT_INDEX_TYPE","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","key","PATTERN_LENGTH_TOO_LARGE","max","MISSING_KEY_PROPERTY","name","INVALID_KEY_WEIGHT_VALUE","hasOwn","hasOwnProperty","KeyStore","constructor","keys","_keys","_keyMap","totalWeight","forEach","obj","createKey","weight","push","id","get","keyId","toJSON","JSON","stringify","path","src","createKeyPath","createKeyId","Error","split","join","list","arr","deepGet","index","i","len","MatchOptions","includeMatches","findAllMatches","minMatchCharLength","BasicOptions","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","FuzzyOptions","location","threshold","distance","AdvancedOptions","useExtendedSearch","getFn","ignoreLocation","ignoreFieldNorm","Config","SPACE","norm","mantissa","cache","Map","numTokens","match","has","n","parseFloat","Math","sqrt","toFixed","set","clear","FuseIndex","isCreated","setIndexRecords","setSources","docs","records","setKeys","_keysMap","create","doc","docIndex","_addString","_addObject","add","size","removeAt","splice","getValueForItemAtKeyId","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","map","parseIndex","data","transformMatches","matches","indices","refIndex","transformScore","computeScore","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","convertMaskToIndices","matchmask","start","end","MAX_BITS","search","text","patternAlphabet","patternLen","textLen","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","finish","bitArr","j","charMatch","charAt","isMatch","createPatternAlphabet","char","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","searchIn","allIndices","totalScore","hasMatches","BaseMatch","isMultiMatch","getMatch","multiRegex","isSingleMatch","singleRegex","exp","ExactMatch","type","InverseExactMatch","PrefixExactMatch","startsWith","InversePrefixExactMatch","SuffixExactMatch","endsWith","InverseSuffixExactMatch","FuzzyMatch","_bitapSearch","IncludeMatch","searchers","searchersLen","SPACE_RE","OR_TOKEN","parseQuery","query","filter","results","queryItem","found","searcher","token","MultiMatchSet","Set","ExtendedSearch","condition","_","numMatches","qLen","pLen","registeredSearchers","register","args","createSearcher","searcherClass","LogicalOperator","AND","OR","KeyType","PATH","PATTERN","isExpression","isPath","isLeaf","convertToExplicit","parse","auto","next","isQueryPath","node","children","operator","Fuse","_keyStore","setCollection","_docs","_myIndex","remove","predicate","getIndex","limit","_searchStringList","_searchObjectList","_searchLogical","computeScore$1","sort","slice","format","expression","evaluate","_findMatches","res","child","resultMap","expResults","pow","Number","EPSILON","transformers","transformer","version","config"],"mappings":"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","sourcesContent":["/**\n * Fuse.js v6.4.1 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2020 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return { path, id, weight, src }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      const n = parseFloat((1 / Math.sqrt(numTokens)).toFixed(mantissa));\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({ getFn = Config.getFn } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(keys, docs, { getFn = Config.getFn } = {}) {\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(data, { getFn = Config.getFn } = {}) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction computeScore(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 1 : 0,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore$1(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n      switch (node.operator) {\n        case LogicalOperator.AND: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n            } else {\n              return []\n            }\n          }\n          return res\n        }\n        case LogicalOperator.OR: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n              break\n            }\n          }\n          return res\n        }\n      }\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\n// Practical scoring function\nfunction computeScore$1(results, { ignoreFieldNorm = Config.ignoreFieldNorm }) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nFuse.version = '6.4.1';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport default Fuse;\n"]},"metadata":{},"sourceType":"module"}